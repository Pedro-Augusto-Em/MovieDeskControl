#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const firebird = require('./firebird_connection');

// ========================================
// Script de Configura√ß√£o Firebird 5.0
// ========================================

console.log('========================================');
console.log('   Configura√ß√£o Firebird 5.0');
console.log('   Sistema: Movidesk Control');
console.log('========================================');
console.log('');

async function setupFirebird() {
    try {
        // 1. Verificar se o diret√≥rio database existe
        const databaseDir = path.dirname(firebird.firebirdConfig.database);
        if (!fs.existsSync(databaseDir)) {
            console.log('üìÅ Criando diret√≥rio do banco de dados...');
            fs.mkdirSync(databaseDir, { recursive: true });
            console.log('‚úÖ Diret√≥rio criado:', databaseDir);
        }

        // 2. Testar conex√£o com Firebird
        console.log('üîå Testando conex√£o com Firebird 5.0...');
        try {
            await firebird.testConnection();
        } catch (error) {
            console.log('‚ö†Ô∏è Erro na conex√£o. Tentando criar banco...');
            
            // 3. Criar banco de dados se n√£o existir
            console.log('üóÑÔ∏è Criando banco de dados...');
            await firebird.createDatabase();
            
            // Aguardar um pouco para o banco ser criado
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Testar conex√£o novamente
            console.log('üîå Testando conex√£o novamente...');
            await firebird.testConnection();
        }

        // 4. Inicializar estrutura do banco
        console.log('üîÑ Inicializando estrutura do banco...');
        await firebird.initializeDatabase();

        // 5. Verificar se as tabelas foram criadas
        console.log('üìä Verificando tabelas criadas...');
        const tables = await firebird.executeQuery(`
            SELECT RDB$RELATION_NAME 
            FROM RDB$RELATIONS 
            WHERE RDB$VIEW_BLR IS NULL 
            AND (RDB$SYSTEM_FLAG IS NULL OR RDB$SYSTEM_FLAG = 0)
            AND RDB$RELATION_NAME NOT LIKE 'RDB$%'
            AND RDB$RELATION_NAME NOT LIKE 'MON$%'
        `);

        console.log('‚úÖ Tabelas encontradas:');
        tables.forEach(table => {
            console.log(`   - ${table.RDB$RELATION_NAME.trim()}`);
        });

        // 6. Verificar dados iniciais
        console.log('üë§ Verificando usu√°rio padr√£o...');
        const users = await firebird.executeQuery('SELECT * FROM USERS');
        if (users.length > 0) {
            console.log('‚úÖ Usu√°rio padr√£o encontrado:', users[0].NAME);
        }

        console.log('üìà Verificando dashboard padr√£o...');
        const dashboards = await firebird.executeQuery('SELECT * FROM DASHBOARDS');
        if (dashboards.length > 0) {
            console.log('‚úÖ Dashboard padr√£o encontrado:', dashboards[0].NAME);
        }

        // 7. Testar procedures
        console.log('‚öôÔ∏è Testando procedures...');
        try {
            const stats = await firebird.getDashboardStats();
            console.log('‚úÖ Procedure GET_DASHBOARD_STATS funcionando');
            console.log('   - Total de tickets:', stats.TOTAL_TICKETS);
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao testar procedure:', error.message);
        }

        console.log('');
        console.log('üéâ Configura√ß√£o conclu√≠da com sucesso!');
        console.log('');
        console.log('üìã Pr√≥ximos passos:');
        console.log('   1. Configure as vari√°veis de ambiente no .env');
        console.log('   2. Execute o backend com: npm start');
        console.log('   3. Acesse o sistema em: http://localhost:3000');
        console.log('');

    } catch (error) {
        console.error('‚ùå Erro durante a configura√ß√£o:', error);
        console.log('');
        console.log('üîß Solu√ß√µes poss√≠veis:');
        console.log('   1. Verifique se o Firebird 5.0 est√° instalado');
        console.log('   2. Verifique se o servi√ßo Firebird est√° rodando');
        console.log('   3. Verifique as credenciais no arquivo .env');
        console.log('   4. Execute como administrador se necess√°rio');
        process.exit(1);
    } finally {
        // Fechar pool de conex√µes
        await firebird.closePool();
    }
}

// ========================================
// Fun√ß√£o para criar arquivo .env
// ========================================

function createEnvFile() {
    const envPath = path.join(__dirname, '..', '.env');
    
    if (!fs.existsSync(envPath)) {
        const envContent = `# ========================================
# Configura√ß√£o Firebird 5.0 - Movidesk Control
# ========================================

# Configura√ß√µes do Firebird
FIREBIRD_HOST=localhost
FIREBIRD_PORT=3050
FIREBIRD_DATABASE=C:/MovideskControl/database/movidesk_control.fdb
FIREBIRD_USER=SYSDBA
FIREBIRD_PASSWORD=masterkey

# Configura√ß√µes do Servidor
PORT=3000
NODE_ENV=production

# Configura√ß√µes de Seguran√ßa
JWT_SECRET=your-secret-key-here
SESSION_SECRET=your-session-secret-here

# Configura√ß√µes de Upload
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads

# Configura√ß√µes de Log
LOG_LEVEL=info
LOG_FILE=./logs/app.log
`;

        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Arquivo .env criado');
    } else {
        console.log('‚ÑπÔ∏è Arquivo .env j√° existe');
    }
}

// ========================================
// Fun√ß√£o para verificar depend√™ncias
// ========================================

function checkDependencies() {
    console.log('üì¶ Verificando depend√™ncias...');
    
    const packagePath = path.join(__dirname, '..', 'backend', 'package.json');
    if (!fs.existsSync(packagePath)) {
        console.error('‚ùå package.json n√£o encontrado em backend/');
        return false;
    }

    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    const requiredDeps = ['node-firebird', 'express', 'multer', 'xlsx'];
    
    const missingDeps = requiredDeps.filter(dep => !packageJson.dependencies[dep]);
    
    if (missingDeps.length > 0) {
        console.log('‚ö†Ô∏è Depend√™ncias faltando:', missingDeps.join(', '));
        console.log('üí° Execute: cd backend && npm install');
        return false;
    }

    console.log('‚úÖ Todas as depend√™ncias est√£o instaladas');
    return true;
}

// ========================================
// Fun√ß√£o principal
// ========================================

async function main() {
    console.log('üîç Verificando ambiente...');
    
    // Verificar depend√™ncias
    if (!checkDependencies()) {
        process.exit(1);
    }

    // Criar arquivo .env
    createEnvFile();
    
    console.log('');
    
    // Executar configura√ß√£o
    await setupFirebird();
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erro fatal:', error);
        process.exit(1);
    });
}

module.exports = { setupFirebird, createEnvFile, checkDependencies };
