-- ========================================
-- Estrutura do Banco de Dados Firebird 5.0
-- Sistema: Movidesk Control
-- Versão: 1.0
-- ========================================

-- Configurações do banco
SET NAMES UTF8;
SET SQL DIALECT 3;

-- ========================================
-- TABELA: TICKETS
-- Armazena os dados dos tickets importados
-- ========================================
CREATE TABLE TICKETS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NUMERO_TICKET VARCHAR(50) NOT NULL,
    ABERTO_EM TIMESTAMP,
    RESPONSAVEL VARCHAR(100),
    CLIENTE_CLASSIFICACAO VARCHAR(50),
    CLIENTE_COMPLETO VARCHAR(200),
    CLIENTE_ORGANIZACAO VARCHAR(200),
    ASSUNTO BLOB SUB_TYPE TEXT,
    TEMPO_VIDA_HORAS DECIMAL(10,2),
    STATUS VARCHAR(50),
    NR_MANTIS VARCHAR(50),
    DATA_SOURCE VARCHAR(100) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ========================================
-- TABELA: USERS
-- Armazena dados dos usuários do sistema
-- ========================================
CREATE TABLE USERS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USERNAME VARCHAR(50) UNIQUE NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    ROLE VARCHAR(50) DEFAULT 'Analista',
    AVATAR BLOB SUB_TYPE BINARY,
    EMAIL VARCHAR(100),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ========================================
-- TABELA: DASHBOARDS
-- Armazena configurações dos dashboards
-- ========================================
CREATE TABLE DASHBOARDS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION BLOB SUB_TYPE TEXT,
    USER_ID BIGINT,
    IS_DEFAULT BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE SET NULL
);

-- ========================================
-- TABELA: DASHBOARD_CHARTS
-- Armazena configurações dos gráficos dos dashboards
-- ========================================
CREATE TABLE DASHBOARD_CHARTS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DASHBOARD_ID BIGINT NOT NULL,
    CHART_TYPE VARCHAR(50) NOT NULL,
    CHART_TITLE VARCHAR(100),
    CHART_CONFIG BLOB SUB_TYPE TEXT,
    POSITION_X INTEGER DEFAULT 0,
    POSITION_Y INTEGER DEFAULT 0,
    WIDTH INTEGER DEFAULT 400,
    HEIGHT INTEGER DEFAULT 300,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (DASHBOARD_ID) REFERENCES DASHBOARDS(ID) ON DELETE CASCADE
);

-- ========================================
-- TABELA: DATA_SOURCES
-- Armazena informações sobre as fontes de dados
-- ========================================
CREATE TABLE DATA_SOURCES (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    FILENAME VARCHAR(200) NOT NULL,
    FILE_SIZE BIGINT,
    UPLOAD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    RECORDS_COUNT INTEGER DEFAULT 0,
    USER_ID BIGINT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE SET NULL
);

-- ========================================
-- ÍNDICES PARA PERFORMANCE
-- ========================================

-- Índices para TICKETS
CREATE INDEX IDX_TICKETS_NUMERO ON TICKETS(NUMERO_TICKET);
CREATE INDEX IDX_TICKETS_STATUS ON TICKETS(STATUS);
CREATE INDEX IDX_TICKETS_RESPONSAVEL ON TICKETS(RESPONSAVEL);
CREATE INDEX IDX_TICKETS_CLIENTE ON TICKETS(CLIENTE_COMPLETO);
CREATE INDEX IDX_TICKETS_DATA_SOURCE ON TICKETS(DATA_SOURCE);
CREATE INDEX IDX_TICKETS_ABERTO_EM ON TICKETS(ABERTO_EM);

-- Índices para USERS
CREATE INDEX IDX_USERS_USERNAME ON USERS(USERNAME);
CREATE INDEX IDX_USERS_EMAIL ON USERS(EMAIL);

-- Índices para DASHBOARDS
CREATE INDEX IDX_DASHBOARDS_USER ON DASHBOARDS(USER_ID);
CREATE INDEX IDX_DASHBOARDS_DEFAULT ON DASHBOARDS(IS_DEFAULT);

-- Índices para DASHBOARD_CHARTS
CREATE INDEX IDX_DASHBOARD_CHARTS_DASHBOARD ON DASHBOARD_CHARTS(DASHBOARD_ID);
CREATE INDEX IDX_DASHBOARD_CHARTS_TYPE ON DASHBOARD_CHARTS(CHART_TYPE);

-- Índices para DATA_SOURCES
CREATE INDEX IDX_DATA_SOURCES_NAME ON DATA_SOURCES(NAME);
CREATE INDEX IDX_DATA_SOURCES_USER ON DATA_SOURCES(USER_ID);

-- ========================================
-- TRIGGERS PARA ATUALIZAÇÃO AUTOMÁTICA
-- ========================================

-- Trigger para atualizar UPDATED_AT em TICKETS
CREATE TRIGGER TR_TICKETS_UPDATE FOR TICKETS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
    NEW.UPDATED_AT = CURRENT_TIMESTAMP;
END;

-- Trigger para atualizar UPDATED_AT em USERS
CREATE TRIGGER TR_USERS_UPDATE FOR USERS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
    NEW.UPDATED_AT = CURRENT_TIMESTAMP;
END;

-- Trigger para atualizar UPDATED_AT em DASHBOARDS
CREATE TRIGGER TR_DASHBOARDS_UPDATE FOR DASHBOARDS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
    NEW.UPDATED_AT = CURRENT_TIMESTAMP;
END;

-- Trigger para atualizar UPDATED_AT em DASHBOARD_CHARTS
CREATE TRIGGER TR_DASHBOARD_CHARTS_UPDATE FOR DASHBOARD_CHARTS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
    NEW.UPDATED_AT = CURRENT_TIMESTAMP;
END;

-- ========================================
-- DADOS INICIAIS
-- ========================================

-- Inserir usuário padrão
INSERT INTO USERS (USERNAME, NAME, ROLE, EMAIL) 
VALUES ('admin', 'Administrador', 'Administrador', 'admin@movideskcontrol.com');

-- Inserir dashboard padrão
INSERT INTO DASHBOARDS (NAME, DESCRIPTION, USER_ID, IS_DEFAULT) 
VALUES ('Dashboard Principal', 'Dashboard padrão do sistema', 1, TRUE);

-- ========================================
-- PROCEDURES ÚTEIS
-- ========================================

-- Procedure para limpar dados antigos
CREATE PROCEDURE CLEANUP_OLD_DATA (
    DAYS_TO_KEEP INTEGER
)
AS
BEGIN
    DELETE FROM TICKETS 
    WHERE CREATED_AT < DATEADD(DAY, -:DAYS_TO_KEEP, CURRENT_TIMESTAMP);
END;

-- Procedure para estatísticas do dashboard
CREATE PROCEDURE GET_DASHBOARD_STATS
RETURNS (
    TOTAL_TICKETS INTEGER,
    TICKETS_ABERTOS INTEGER,
    TICKETS_FECHADOS INTEGER,
    MEDIA_TEMPO_VIDA DECIMAL(10,2),
    TOP_RESPONSAVEL VARCHAR(100),
    TOP_CLIENTE VARCHAR(200)
)
AS
BEGIN
    -- Total de tickets
    SELECT COUNT(*) FROM TICKETS INTO :TOTAL_TICKETS;
    
    -- Tickets abertos
    SELECT COUNT(*) FROM TICKETS 
    WHERE STATUS = 'Aberto' OR STATUS = 'Em Andamento' 
    INTO :TICKETS_ABERTOS;
    
    -- Tickets fechados
    SELECT COUNT(*) FROM TICKETS 
    WHERE STATUS = 'Fechado' OR STATUS = 'Resolvido' 
    INTO :TICKETS_FECHADOS;
    
    -- Média do tempo de vida
    SELECT AVG(TEMPO_VIDA_HORAS) FROM TICKETS 
    WHERE TEMPO_VIDA_HORAS IS NOT NULL 
    INTO :MEDIA_TEMPO_VIDA;
    
    -- Top responsável
    SELECT FIRST 1 RESPONSAVEL 
    FROM TICKETS 
    WHERE RESPONSAVEL IS NOT NULL 
    GROUP BY RESPONSAVEL 
    ORDER BY COUNT(*) DESC 
    INTO :TOP_RESPONSAVEL;
    
    -- Top cliente
    SELECT FIRST 1 CLIENTE_COMPLETO 
    FROM TICKETS 
    WHERE CLIENTE_COMPLETO IS NOT NULL 
    GROUP BY CLIENTE_COMPLETO 
    ORDER BY COUNT(*) DESC 
    INTO :TOP_CLIENTE;
    
    SUSPEND;
END;

-- ========================================
-- VIEWS ÚTEIS
-- ========================================

-- View para tickets com informações completas
CREATE VIEW V_TICKETS_COMPLETO AS
SELECT 
    T.*,
    U.NAME AS USER_NAME,
    DS.NAME AS DATA_SOURCE_NAME
FROM TICKETS T
LEFT JOIN USERS U ON T.RESPONSAVEL = U.USERNAME
LEFT JOIN DATA_SOURCES DS ON T.DATA_SOURCE = DS.NAME;

-- View para estatísticas por responsável
CREATE VIEW V_STATS_RESPONSAVEL AS
SELECT 
    RESPONSAVEL,
    COUNT(*) AS TOTAL_TICKETS,
    COUNT(CASE WHEN STATUS IN ('Aberto', 'Em Andamento') THEN 1 END) AS TICKETS_ABERTOS,
    COUNT(CASE WHEN STATUS IN ('Fechado', 'Resolvido') THEN 1 END) AS TICKETS_FECHADOS,
    AVG(TEMPO_VIDA_HORAS) AS MEDIA_TEMPO_VIDA
FROM TICKETS 
WHERE RESPONSAVEL IS NOT NULL
GROUP BY RESPONSAVEL;

-- View para estatísticas por cliente
CREATE VIEW V_STATS_CLIENTE AS
SELECT 
    CLIENTE_COMPLETO,
    CLIENTE_ORGANIZACAO,
    COUNT(*) AS TOTAL_TICKETS,
    COUNT(CASE WHEN STATUS IN ('Aberto', 'Em Andamento') THEN 1 END) AS TICKETS_ABERTOS,
    COUNT(CASE WHEN STATUS IN ('Fechado', 'Resolvido') THEN 1 END) AS TICKETS_FECHADOS,
    AVG(TEMPO_VIDA_HORAS) AS MEDIA_TEMPO_VIDA
FROM TICKETS 
WHERE CLIENTE_COMPLETO IS NOT NULL
GROUP BY CLIENTE_COMPLETO, CLIENTE_ORGANIZACAO;

-- ========================================
-- PERMISSÕES
-- ========================================

-- Conceder permissões para o usuário SYSDBA
GRANT ALL ON TICKETS TO SYSDBA;
GRANT ALL ON USERS TO SYSDBA;
GRANT ALL ON DASHBOARDS TO SYSDBA;
GRANT ALL ON DASHBOARD_CHARTS TO SYSDBA;
GRANT ALL ON DATA_SOURCES TO SYSDBA;

-- Conceder permissões para procedures e views
GRANT EXECUTE ON PROCEDURE CLEANUP_OLD_DATA TO SYSDBA;
GRANT EXECUTE ON PROCEDURE GET_DASHBOARD_STATS TO SYSDBA;
GRANT SELECT ON V_TICKETS_COMPLETO TO SYSDBA;
GRANT SELECT ON V_STATS_RESPONSAVEL TO SYSDBA;
GRANT SELECT ON V_STATS_CLIENTE TO SYSDBA;

-- ========================================
-- FIM DA ESTRUTURA
-- ========================================
